generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  fullName           String
  userType           UserType
  phoneNumber        String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  appointments       Appointment[]  @relation("ClientAppointments")
  expertAppointments Appointment[]  @relation("ExpertAppointments")
  subscriptions      Subscription[]
  payments           Payment[]
  notifications      Notification[]
}

enum UserType {
  CLIENT
  DIETITIAN
  PSYCHOLOGIST
}

model SubscriptionPlan {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  duration      Int
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  subscriptionId  String
  amount          Float
  currency        String
  status          PaymentStatus
  paymentMethod   PaymentMethod
  stripePaymentId String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  invoice         Invoice?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
}

model Invoice {
  id          String   @id @default(uuid())
  paymentId   String   @unique
  invoiceNo   String   @unique
  taxRate     Float
  taxAmount   Float
  totalAmount Float
  createdAt   DateTime @default(now())
  payment     Payment  @relation(fields: [paymentId], references: [id])
}

model Appointment {
  id           String            @id @default(uuid())
  clientId     String
  expertId     String
  startTime    DateTime
  endTime      DateTime
  type         AppointmentType
  status       AppointmentStatus
  notes        String?
  meetingLink  String?
  cancelReason String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  client       User              @relation("ClientAppointments", fields: [clientId], references: [id])
  expert       User              @relation("ExpertAppointments", fields: [expertId], references: [id])
}

enum AppointmentType {
  ONLINE
  IN_PERSON
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

model ExpertSchedule {
  id          String   @id @default(uuid())
  expertId    String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String              @id @default(uuid())
  userId    String
  type      NotificationType
  channel   NotificationChannel
  title     String
  content   String
  status    NotificationStatus
  metadata  Json?
  sentAt    DateTime?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id])
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_CANCELLATION
  SUBSCRIPTION_EXPIRING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
}

enum NotificationChannel {
  EMAIL
  SMS
  BOTH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}
